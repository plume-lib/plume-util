plugins {
  // To create a fat jar build/libs/plume-util-all.jar, run: ./gradlew shadowJar
  id "com.github.johnrengelman.shadow" version "5.1.0"
  // Run the Error Prone linter.
  id "net.ltgt.errorprone-base" version "0.0.16"
  // Formatting is disabled due to poor handling of type annotations; wait until
  // this issue is fixed: https://github.com/google/google-java-format/issues/5
  // // Code formatting with Google Java Format; defines targets "goJF" and "verJF".
  // id "com.github.sherter.google-java-format" version "0.7.1"

  // Checker Framework pluggable type-checking
  id "org.checkerframework" version "0.3.30" apply false
}

apply plugin: 'java-library'

// To upload to Maven Central, see instructions in the file.
apply from: "${buildscript.sourceFile.parent}/gradle/mavencentral.gradle"

dependencies {
  // https://mvnrepository.com/artifact/org.plumelib/reflection-util
  implementation 'org.plumelib:reflection-util:0.0.4'
  testImplementation 'junit:junit:4.12'
  errorprone 'com.google.errorprone:error_prone_core:2.3.3'
}

repositories {
  mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

// Checker Framework pluggable type-checking
apply plugin: 'org.checkerframework'
checkerFramework {
  checkers = [
    'org.checkerframework.checker.formatter.FormatterChecker',
    'org.checkerframework.checker.index.IndexChecker',
    'org.checkerframework.checker.interning.InterningChecker',
    'org.checkerframework.checker.lock.LockChecker',
    'org.checkerframework.checker.nullness.NullnessChecker',
    'org.checkerframework.checker.regex.RegexChecker',
    'org.checkerframework.checker.signature.SignatureChecker'
  ]
  extraJavacArgs = [
    '-Werror',
    '-AcheckPurityAnnotations',
    '-ArequirePrefixInWarningSuppressions',
    '-AwarnUnneededSuppressions'
  ]
}
// To use a local-built Checker Framework, run gradle with "-PcfLocal".
if (project.hasProperty("cfLocal")) {
  def cfHome = String.valueOf(System.getenv("CHECKERFRAMEWORK"))
  dependencies {
    compileOnly files(cfHome + "/checker/dist/checker-qual.jar")
    testCompileOnly files(cfHome + "/checker/dist/checker-qual.jar")
    checkerFramework files(cfHome + "/checker/dist/checker.jar")
    checkerFrameworkAnnotatedJDK files(cfHome + "/checker/dist/jdk8.jar")
  }
}


/// Javadoc

// Turn Javadoc warnings into errors.
javadoc {
  options.addStringOption('Xwerror', '-Xdoclint:all')
  // Can't enable private because WeakIdentityHashMap.java doesn't have exhaustive Javadoc comments
  // options.addStringOption('private', '-quiet')
}

task javadocWeb(type: Javadoc) {
  source = sourceSets.main.allJava
  destinationDir = file("/cse/web/research/plumelib/plume-util/api")
  classpath = project.sourceSets.main.compileClasspath
}

// `requireJavadoc` target ensures that all Java elements have Javadoc documentation.
dependencies {
  compileOnly group: 'org.plumelib', name: 'require-javadoc', version: '0.1.2'
}
task requireJavadoc(type: Javadoc) {
  destinationDir.deleteDir()
  source = sourceSets.main.allJava
  classpath = project.sourceSets.main.compileClasspath
  options.memberLevel = JavadocMemberLevel.PRIVATE
  options.docletpath = project.sourceSets.main.compileClasspath as List
  options.doclet = "org.plumelib.javadoc.RequireJavadoc"
  options.addStringOption('skip', 'WeakIdentityHashMap|WeakHasherMap')
}

/// Emacs support

/* Make Emacs TAGS table */
task tags(type: Exec) {
  description "Run etags to create an Emacs TAGS table"
  commandLine "bash", "-c", "find src/ -name '*.java' | sort | xargs etags"
}
