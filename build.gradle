plugins {
  id 'java-library'

  // To create a fat jar build/libs/plume-util-all.jar, run: ./gradlew shadowJar
  id 'com.github.johnrengelman.shadow' version '6.1.0'

  // Formatting is disabled due to poor handling of type annotations; wait until
  // this issue is fixed: https://github.com/google/google-java-format/issues/5
  // // Code formatting with Google Java Format; defines targets "goJF" and "verJF".
  // id 'com.github.sherter.google-java-format' version '0.7.1'

  // Error Prone linter
  id("net.ltgt.errorprone") version "2.0.2"

  // Checker Framework pluggable type-checking
  id 'org.checkerframework' version '0.5.23'
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.plumelib:reflection-util:1.0.3'

  errorprone 'com.google.errorprone:error_prone_core:2.7.1'

  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

// To upload to Maven Central, see instructions in the file.
apply from: "${buildscript.sourceFile.parent}/gradle/mavencentral.gradle"

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
        excludeEngines 'junit-vintage'
    }

    testLogging {
        outputs.upToDateWhen{false}
        showStandardStreams = true
    }
}

/// Error Prone linter

dependencies {
  errorprone("com.google.errorprone:error_prone_core:2.5.1")
  // JDK 8 support for Error Prone:
  errorproneJavac("com.google.errorprone:javac:9+181-r4173-1")
}
tasks.withType(JavaCompile).configureEach {
  options.compilerArgs << "-Xlint:all,-processing" << "-Werror"
  options.errorprone {
    // Code copied from the JDK that we don't want to change gratuitously.
    excludedPaths = ".*/Weak.*Hash(er)?Map.java"
    disable(
        // The suggestion recommends an Error-Prone-specific annotation
        "InlineMeSuggester")
  }
  options.forkOptions.jvmArgs += "-Xmx2g"
}

/// Checker Framework pluggable type-checking

apply plugin: 'org.checkerframework'

checkerFramework {
  checkers = [
    'org.checkerframework.checker.formatter.FormatterChecker',
    'org.checkerframework.checker.index.IndexChecker',
    'org.checkerframework.checker.interning.InterningChecker',
    'org.checkerframework.checker.lock.LockChecker',
    'org.checkerframework.checker.nullness.NullnessChecker',
    'org.checkerframework.checker.regex.RegexChecker',
    'org.checkerframework.checker.signature.SignatureChecker',
    'org.checkerframework.common.initializedfields.InitializedFieldsChecker',
  ]
  extraJavacArgs = [
    '-Werror',
    '-AcheckPurityAnnotations',
    '-ArequirePrefixInWarningSuppressions',
    '-AwarnUnneededSuppressions',
  ]
}
// To use a locally-built Checker Framework, run gradle with "-PcfLocal".
if (project.hasProperty("cfLocal")) {
  def cfHome = String.valueOf(System.getenv("CHECKERFRAMEWORK"))
  dependencies {
    compileOnly files(cfHome + "/checker/dist/checker-qual.jar")
    testCompileOnly files(cfHome + "/checker/dist/checker-qual.jar")
    checkerFramework files(cfHome + "/checker/dist/checker.jar")
  }
}


/// Javadoc

// Turn Javadoc warnings into errors.
javadoc {
  options.addStringOption('Xwerror', '-Xdoclint:all')
  options.addStringOption('private', '-quiet')
  // WeakIdentityHashMap leads to lots of Javadoc warnings due to missing Javadoc.
  // How can I generate Javadoc for it while still being strict for all other files?
  exclude '**/WeakIdentityHashMap.java'
  if (JavaVersion.current().compareTo(org.gradle.api.JavaVersion.VERSION_1_9) >= 0) {
      options.addStringOption("-release", "8");
  }
  doLast {
    if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
      ant.replaceregexp(match:"@import url\\('resources/fonts/dejavu.css'\\);\\s*", replace:'',
	flags:'g', byline:true) {
	fileset(dir: destinationDir)
      }
    }
  }
}
check.dependsOn javadoc

task javadocWeb(type: Javadoc) {
  description "Upload API documentation to website."
  source = sourceSets.main.allJava
  destinationDir = file("/cse/web/research/plumelib/${project.name}/api")
  classpath = project.sourceSets.main.compileClasspath
  if (JavaVersion.current().compareTo(org.gradle.api.JavaVersion.VERSION_1_9) >= 0) {
      options.addStringOption("-release", "8");
  }
  doLast {
    if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
      ant.replaceregexp(match:"@import url\\('resources/fonts/dejavu.css'\\);\\s*", replace:'',
	flags:'g', byline:true) {
	fileset(dir: destinationDir)
      }
    }
  }
}

configurations {
  requireJavadoc
}
dependencies {
  requireJavadoc "org.plumelib:require-javadoc:1.0.2"
}
task requireJavadoc(type: JavaExec) {
  description = 'Ensures that Javadoc documentation exists.'
  mainClass = "org.plumelib.javadoc.RequireJavadoc"
  classpath = configurations.requireJavadoc
  args "src/main/java", "--dont-require=WeakHasherMap|WeakIdentityHashMap"
}
check.dependsOn requireJavadoc
javadocWeb.dependsOn requireJavadoc

/// Emacs support

/* Make Emacs TAGS table */
task tags(type: Exec) {
  description "Run etags to create an Emacs TAGS table"
  commandLine "bash", "-c", "find src/ -name '*.java' | sort | xargs etags"
}

/// Determine classpath

task printTestCompileClasspath {
  description = 'Print the compile-time test classpath'
  doFirst {
    println "Compile classpath:"
    println sourceSets.test.compileClasspath.asPath
  }
}
